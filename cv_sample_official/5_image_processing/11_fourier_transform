# We'll learn how to find the Fourier Transform of images using OpenCV
# For images, 2D Discrete Fourier Transform (DFT) is used to find the frequency domain.
# A fast algorithm called Fast Fourier Transform (FFT) is used for calculation of DFT.

# A good explanation can be seen in website: http://cns-alumni.bu.edu/~slehar/fourier/fourier.html#basic

# Fourier transform can be used to analyse the image, and
# Through the inverse transform we can reconstruct the image

# Functions : cv2.dft(), cv2.idft() etc


import numpy as np
import cv2
from matplotlib import pyplot as plt

img = cv2.imread('../images/lenna.png', 0)

# ====== Descrete Fourier Transform
dft = cv2.dft(np.float32(img), flags=cv2.DFT_COMPLEX_OUTPUT)  # img should be float32
dft_shift = np.fft.fftshift(dft)  # fftshift is used for making zero frequence in the middle so to visualize

magnitude_spectrum = 20 * np.log(cv2.magnitude(dft_shift[:, :, 0], dft_shift[:, :, 1]))

plt.subplot(121), plt.imshow(img, cmap='gray')
plt.title('Input Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122), plt.imshow(magnitude_spectrum, cmap='gray')
plt.title('Magnitude Spectrum'), plt.xticks([]), plt.yticks([])
plt.show()

# ====== Inverse Fourier Transform, low-pass square filter
rows, cols = img.shape
crow, ccol = rows / 2, cols / 2

# create a mask first, center square is 1, remaining all zeros
mask = np.zeros((rows, cols, 2), np.uint8)
mask[crow - 30:crow + 30, ccol - 30:ccol + 30] = 1

# apply mask and inverse DFT
fshift = dft_shift * mask
f_ishift = np.fft.ifftshift(fshift)
img_back = cv2.idft(f_ishift)
img_back = cv2.magnitude(img_back[:, :, 0], img_back[:, :, 1])

plt.subplot(121), plt.imshow(img, cmap='gray')
plt.title('Input Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122), plt.imshow(img_back, cmap='gray')
plt.title('Magnitude Spectrum'), plt.xticks([]), plt.yticks([])
plt.show()

# ====== Optimization
# fourier transform is faster(4X) in some array size than other, USE cv2.getOptimalDFTSize() to find it
# More content could be found in
# http://docs.opencv.org/3.0-beta/doc/py_tutorials/py_imgproc/py_transforms/py_fourier_transform/py_fourier_transform.html#fourier-transform


# ====== Filters and Fourier Transform

# simple averaging filter without scaling parameter
mean_filter = np.ones((3, 3))

# creating a guassian filter
x = cv2.getGaussianKernel(5, 10)
gaussian = x * x.T

# different edge detecting filters
# scharr in x-direction
scharr = np.array([[-3, 0, 3],
                   [-10, 0, 10],
                   [-3, 0, 3]])
# sobel in x direction
sobel_x = np.array([[-1, 0, 1],
                    [-2, 0, 2],
                    [-1, 0, 1]])
# sobel in y direction
sobel_y = np.array([[-1, -2, -1],
                    [0, 0, 0],
                    [1, 2, 1]])
# laplacian
laplacian = np.array([[0, 1, 0],
                      [1, -4, 1],
                      [0, 1, 0]])

filters = [mean_filter, gaussian, laplacian, sobel_x, sobel_y, scharr]
filter_name = ['mean_filter', 'gaussian', 'laplacian', 'sobel_x', \
               'sobel_y', 'scharr_x']
fft_filters = [np.fft.fft2(x) for x in filters]
fft_shift = [np.fft.fftshift(y) for y in fft_filters]
mag_spectrum = [np.log(np.abs(z) + 1) for z in fft_shift]

for i in xrange(6):
    plt.subplot(2, 3, i + 1), plt.imshow(mag_spectrum[i], cmap='gray')
    plt.title(filter_name[i]), plt.xticks([]), plt.yticks([])

plt.show()
